<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[主动式信息搜索]]></title>
    <url>%2Funcategorized%2F%E4%B8%BB%E5%8A%A8%E5%BC%8F%E4%BF%A1%E6%81%AF%E6%90%9C%E7%B4%A2.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[被动式信息搜集]]></title>
    <url>%2FWEB%E5%AE%89%E5%85%A8%2F%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E7%AF%87%2F%E8%A2%AB%E5%8A%A8%E5%BC%8F%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.html</url>
    <content type="text"><![CDATA[被动信息搜集介绍使用被动，间接地信息搜集技巧，你可以再不接触到目标系统的情况下挖掘目标信息。举例来说，你可以使用你这些技巧确定网络边界情况和网络运维人员，甚至了解到目标网络中使用的操作系统和网站服务器软件的类型。在搜集目标资料时应该搜集：服务器的配置信息和网站的信息，其中包括网站注册人，目标网站系统，目标服务器系统，目标网站相关子域名，目标服务器所开放的端口和服务器存放网站等。 域名注册人查询whois查询12345678910111213root@kali:~# whois yuhong.com.cnDomain Name: yuhong.com.cnROID: 20021209s10011s00004332-cnDomain Status: clientTransferProhibitedRegistrant ID: hc451003408-cnRegistrant: 北京东方雨虹防水技术股份有限公司Registrant Contact Email: songht@yuhong.com.cnSponsoring Registrar: 阿里云计算有限公司（万网）Name Server: dns9.hichina.comName Server: dns10.hichina.comRegistration Time: 2001-07-18 00:00:00Expiration Time: 2021-07-18 00:00:00DNSSEC: unsigned DNS枚举firece工具主要对子域名进行扫描和收集信息，可以获取一个目标主机上所有的IP地址和主机信息。root@kali:~# fierce -dns 目标站点执行暴力破解，测试的数量取决于字典中提供的字符串数量，可以使用自带的hosts.txt。也可以自定义字典将一些常用的字段输入进去，root@kali:~# fierce -dns 目标站点 -wordlist /usr/share/fierce/hosts.txt在知道了目标站点IP地址的情况下，可以再次使用whois查询获得一些信息。 aqautone工具介绍：是一套用于对域名进行侦察的工具。它可以通过使用开放源码和更常见的子域名字典暴力法来发现给定域上的子域。在子域发现后，AQUATONE可以扫描主机以查找常见的Web端口，HTTP头，HTML主体和屏幕截图可以收集并整合到一个报告中，以便于对攻击面进行分析。aquatone-discover：使用被动收集或字典爆破方式发现子域名aquatone-scan：完成子域名扫描后，可扫描域名开放端口、HTTP header、HTML body、截图等信息并生成报告aquatone-gather：对扫描结果中的IP进行访问请求和网页截图，搜集信息aquatone-takeover：检测域名是否存在子域名劫持风险工具之间能互相利用其他工具扫描生成的结果开展下一步工作。12345678910root@kali:~# aquatone-discover -d 目标站点 __ ____ _____ ___ ______ _/ /_____ ____ ___ / __ `/ __ `/ / / / __ `/ __/ __ \/ __ \/ _ \/ /_/ / /_/ / /_/ / /_/ / /_/ /_/ / / / / __/\__,_/\__, /\__,_/\__,_/\__/\____/_/ /_/\___/ /_/ discover v0.5.0 - by @michenriksenIdentifying nameservers for yuhong.com.cn... DoneUsing nameservers: nslookup介绍：nslookup命令用于查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。指令只是一个检查网络联通情况的命令，虽然在输入的参数是域名的情况下会通过DNS进行查询，但是它只能查询A类型和CNAME类型的记录，而且只会告诉你域名是否存在，其他的信息一概欠奉。所以如果你需要对DNS的故障进行排错就必须熟练另一个更强大的工具nslookup。这个命令可以指定查询的类型，可以查到DNS记录的生存时间还可以指定使用那个DNS服务器进行解释。 指定类型查询set type=mx查询其他类型的域名 如果没有加任何参数，所以默认情况下nslookup查询的是A类型的记录。如果我们配置了其他类型的记录希望看到解释是否正常。这时候ping就无能为力了。比如我们配置了MX记录，但是邮件服务器只能发信不能收信，到底是域名解释问题还是其他的问题Ping命令的检查只能让你误入歧途。nslookup 这时候可以模拟你的其他遇见服务器进行域名解释的情况。我们需要在nslookup上加上适当的参数。指定查询记录类型的指令格式如下： nslookup –qt=类型 目标域名 注意qt必须小写。 类型可以是一下字符，不区分大小写：123456789101112131415161718192021222324252627C:\Users\FRANCI4&gt;nslookup -qt=mx yuhong.com.cn服务器: UnKnownAddress: 192.168.0.1非权威应答:yuhong.com.cn MX preference = 10, mail exchanger = mail.yuhong.com.cnyuhong.com.cn nameserver = dns9.hichina.comyuhong.com.cn nameserver = dns10.hichina.comdns9.hichina.com internet address = 106.11.141.115dns9.hichina.com internet address = 106.11.141.125dns9.hichina.com internet address = 106.11.211.55dns9.hichina.com internet address = 106.11.211.65dns9.hichina.com internet address = 140.205.41.15dns9.hichina.com internet address = 140.205.41.25dns9.hichina.com internet address = 140.205.81.15dns9.hichina.com internet address = 140.205.81.25dns10.hichina.com internet address = 106.11.141.126dns10.hichina.com internet address = 106.11.211.56dns10.hichina.com internet address = 106.11.211.66dns10.hichina.com internet address = 140.205.41.16dns10.hichina.com internet address = 140.205.41.26dns10.hichina.com internet address = 140.205.81.16dns10.hichina.com internet address = 140.205.81.26dns10.hichina.com internet address = 106.11.141.116dns9.hichina.com AAAA IPv6 address = 2400:3200:2000:28::1dns10.hichina.com AAAA IPv6 address = 2400:3200:2000:29::1 其他配置命令 A 地址记录(Ipv4) AAAA 地址记录（Ipv6） AFSDB Andrew文件系统数据库服务器记录（不懂） ATMA ATM地址记录（不是自动提款机） CNAME 别名记录 HINFO 硬件配置记录，包括CPU、操作系统信息 ISDN 域名对应的ISDN号码 MB 存放指定邮箱的服务器 MG 邮件组记录 MINFO 邮件组和邮箱的信息记录 MR 改名的邮箱记录 MX 邮件服务器记录 NS 名字服务器记录 PTR 反向记录（从IP地址解释域名） RP 负责人记录 RT 路由穿透记录（不懂） SRV TCP服务器信息记录（将有大用处） TXT 域名对应的文本信息 X25 域名对应的X.25地址记录 欢迎补充]]></content>
      <categories>
        <category>WEB安全</category>
        <category>信息搜集篇</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Metasploit's Wmap]]></title>
    <url>%2FWEB%E5%AE%89%E5%85%A8%2Fmetasploit%2FMetasploit-s-Wmap.html</url>
    <content type="text"><![CDATA[简介WMAP是一个功能丰富的Web应用程序漏洞扫描程序，最初是从名为SQLMap的工具创建的。该工具与Metasploit集成，允许我们从Metasploit框架内进行Web应用程序扫描。 拥有高效的工作流程是任何工具的重要组成部分，但在探测应用程序的漏洞时尤为重要。虽然Metasploit在开发时被认为是事实上的标准，但它也包含其他活动的模块，例如scanning。例如，WMAP，一种可在Metasploit框架内使用的Web应用程序扫描程序。 Web应用程序扫描程序是用于识别Web应用程序中存在的漏洞的工具。WMAP可以轻松保持流畅的工作流程，因为它可以在Metasploit内部工作时加载和运行 实践操作步骤一在运行 Metasploit 终端前，我们需要先启动用于存储扫描结果的数据库服务：root@kali:~# service postgresql start 步骤二启动命令行终端，运行 Metasploit 控制台：root@kali:~# msfconsole 步骤三加载WMAP使用load wmap命令加载WMAP模块：msf &gt; load wmap从这里，如果我们打字？要显示Metasploit的帮助菜单，我们应该在菜单顶部看到WMAP的命令及其描述。123456789101112msf &gt; ?wmap Commands============= Command Description ------- ----------- wmap_modules Manage wmap modules 管理wmap模块 wmap_nodes Manage nodes 管理节点 wmap_run Test targets 测试目标 wmap_sites Manage sites 管理网站 wmap_targets Manage targets 管理目标 wmap_vulns Display web vulns 显示网页漏洞 步骤四添加要扫描的站点键入任何命令以显示其可用选项; 让我们从使用wmap_sites管理我们希望扫描的网站开始。1234567msf &gt; wmap_sites [*] Usage: wmap_sites [options] -h Display this help text 显示此帮助文本 -a [url] Add site (vhost,url) 添加站点（vhost,url） -d [ids] Delete sites (separate ids with space) 删除站点（用空格分隔id） -l List all available sites 列出所有可用站点 -s [id] Display site structure (vhost,url|ids) (level) (unicode output true/false) 显示站点结构（vhost,url,ids）（级别）（Unicode输出真/假） 要添加站点，请使用带有-a标志的wmap_sites，后跟站点地址。12msf &gt; wmap_sites -a http://192.168.126.142[*] Site created. 站点创建 现在我们可以使用带有-l标志的wmap_sites列出可用站点1234567msf &gt; wmap_sites -l[*] Available sites=============== Id Host Vhost Port Proto # Pages # Forms -- ---- ----- ---- ----- ------- ------- 0 192.168.126.142 192.168.126.142 80 http 0 0 步骤五指定目标URL接下来，我们需要使用wmap_targets设置我们要扫描的特定目标网址。1234567msf &gt; wmap_targets [*] Usage: wmap_targets [options] -h Display this help text 显示此帮助文本 -t [urls] Define target sites (vhost1,url[space]vhost2,url) 定义目标站点（vhost1,url[space]vhost2,url） -d [ids] Define target sites (id1, id2, id3 ...) 定义目标站点（id1，id2，id3 ......） -c Clean target sites list 清理目标站点列表 -l List all target sites 列出所有目标站点 我们可以使用带有-t标志的wmap_targets定义目标，然后是URL。 msf &gt; wmap_targets -t http://192.168.126.142/index.php 并使用带有-l标志的wmap_targets列出已定义的目标1234567msf &gt; wmap_targets -l[*] Defined targets=============== Id Vhost Host Port SSL Path -- ----- ---- ---- --- ---- 0 192.168.126.142 192.168.126.142 80 false /index.php 我们现在应该很好，所以唯一要做的就是实际运行扫描仪。 步骤六运行扫描仪在提示符下键入wmap_run以查看此命令的选项12345678msf &gt; wmap_run[*] Usage: wmap_run [options] -h Display this help text 显示此帮助文本 -t Show all enabled modules 显示所有已启用的模块 -m [regex] Launch only modules that name match provided regex. 仅启动名称匹配的模块提供正则表达式 -p [regex] Only test path defined by regex. 仅由正则表达式定义的测试路径 -e [/path/to/profile] Launch profile modules against all matched targets. 针对所有匹配的目标启动配置文件模块 (No profile file runs all enabled modules.) 没有配置文件运行所有已启用的模块 在扫描目标之前，我们可以使用带有-t标志的wmap_run列出所有已启用的模块12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364msf &gt; wmap_run -t[*] Testing target: 测试目标[*] Site: 192.168.126.142 (192.168.126.142) 网站[*] Port: 80 SSL: false 端口============================================================[*] Testing started. 2019-01-12 18:34:02 +0800 测试开始[*] Loading wmap modules...[*] 39 wmap enabled modules loaded.[*] =[ SSL testing ]= SSL测试============================================================[*] Target is not SSL. SSL modules disabled. 目标不是SSL。模糊测试已禁用[*] =[ Web Server testing ]= web服务器测试============================================================[*] Module auxiliary/scanner/http/http_version[*] Module auxiliary/scanner/http/open_proxy[*] Module auxiliary/admin/http/tomcat_administration[*] Module auxiliary/admin/http/tomcat_utf8_traversal[*] Module auxiliary/scanner/http/drupal_views_user_enum[*] Module auxiliary/scanner/http/frontpage_login[*] Module auxiliary/scanner/http/host_header_injection[*] Module auxiliary/scanner/http/options[*] Module auxiliary/scanner/http/robots_txt[*] Module auxiliary/scanner/http/scraper[*] Module auxiliary/scanner/http/svn_scanner[*] Module auxiliary/scanner/http/trace[*] Module auxiliary/scanner/http/vhost_scanner[*] Module auxiliary/scanner/http/webdav_internal_ip[*] Module auxiliary/scanner/http/webdav_scanner[*] Module auxiliary/scanner/http/webdav_website_content[*] =[ File/Dir testing ]=============================================================[*] Module auxiliary/scanner/http/backup_file[*] Module auxiliary/scanner/http/brute_dirs[*] Module auxiliary/scanner/http/copy_of_file[*] Module auxiliary/scanner/http/dir_listing[*] Module auxiliary/scanner/http/dir_scanner[*] Module auxiliary/scanner/http/dir_webdav_unicode_bypass[*] Module auxiliary/scanner/http/file_same_name_dir[*] Module auxiliary/scanner/http/files_dir[*] Module auxiliary/scanner/http/http_put[*] Module auxiliary/scanner/http/ms09_020_webdav_unicode_bypass[*] Module auxiliary/scanner/http/prev_dir_same_name_file[*] Module auxiliary/scanner/http/replace_ext[*] Module auxiliary/scanner/http/soap_xml[*] Module auxiliary/scanner/http/trace_axd[*] Module auxiliary/scanner/http/verb_auth_bypass[*] =[ Unique Query testing ]=============================================================[*] Module auxiliary/scanner/http/blind_sql_query[*] Module auxiliary/scanner/http/error_sql_injection[*] Module auxiliary/scanner/http/http_traversal[*] Module auxiliary/scanner/http/rails_mass_assignment[*] Module exploit/multi/http/lcms_php_exec[*] =[ Query testing ]=============================================================[*] =[ General testing ]=============================================================[*] Done. 有一些不同类别的模块，包括用于目录测试，查询测试，Web服务器测试和SSL测试的模块，尽管我们可以看到我们的目标不使用SSL，因此这些模块被禁用。要获得任何给定模块的详细说明，请使用info命令，后跟列出的模块的完整路径。例如12345678910111213141516171819202122232425msf &gt; info auxiliary/scanner/http/http_version Name: HTTP Version Detection Module: auxiliary/scanner/http/http_version License: Metasploit Framework License (BSD) Rank: NormalProvided by: hdm &lt;x@hdm.io&gt;Check supported: YesBasic options: Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS yes The target address range or CIDR identifier RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections THREADS 1 yes The number of concurrent threads VHOST no HTTP server virtual hostDescription: Display version information about each system. 回到扫描。让我们使用带有-e标志的wmap_run开始扫描，该标志将运行所有模块而不是指定的模块。根据目标站点和已启用模块的数量，扫描可能需要相当长的时间才能完成。完成后，扫描将显示完成所需的时间12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152msf &gt; wmap_run -e[*] Using ALL wmap enabled modules.[-] NO WMAP NODES DEFINED. Executing local modules[*] Testing target:[*] Site: 192.168.126.142 (192.168.126.142)[*] Port: 80 SSL: false============================================================[*] Testing started. 2019-01-12 18:41:14 +0800[*] =[ SSL testing ]=============================================================[*] Target is not SSL. SSL modules disabled.[*] =[ Web Server testing ]=============================================================[*] Module auxiliary/scanner/http/http_version[+] 192.168.126.142:80 Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45 ( Powered by PHP/5.4.45 )[*] Module auxiliary/scanner/http/open_proxy[*] Module auxiliary/admin/http/tomcat_administration[*] Module auxiliary/admin/http/tomcat_utf8_traversal[*] Attempting to connect to 192.168.126.142:80[+] No File(s) found[*] Module auxiliary/scanner/http/drupal_views_user_enum[-] 192.168.126.142 does not appear to be vulnerable, will not continue[*] Module auxiliary/scanner/http/frontpage_login[*] 192.168.126.142:80 - http://192.168.126.142/ may not support FrontPage Server Extensions[*] Module auxiliary/scanner/http/host_header_injection[*] Module auxiliary/scanner/http/options[*] Module auxiliary/scanner/http/robots_txt[*] Module auxiliary/scanner/http/scraper[+] [192.168.126.142] / [upload-labs][*] Module auxiliary/scanner/http/svn_scanner[*] Using code &apos;404&apos; as not found.[*] Module auxiliary/scanner/http/trace[*] Module auxiliary/scanner/http/vhost_scanner[*] &gt;&gt; Exception during launch from auxiliary/scanner/http/vhost_scanner: The following options failed to validate: DOMAIN.[*] Module auxiliary/scanner/http/webdav_internal_ip[*] Module auxiliary/scanner/http/webdav_scanner[*] 192.168.126.142 (Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45) WebDAV disabled.[*] Module auxiliary/scanner/http/webdav_website_content[*] =[ File/Dir testing ]=============================================================[*] Module auxiliary/scanner/http/backup_file[*] Module auxiliary/scanner/http/brute_dirs[*] Path: /[*] Using code &apos;404&apos; as not found.[+] Found http://192.168.126.142:80/js/ 403[+] Found http://192.168.126.142:80/aux/ 403[+] Found http://192.168.126.142:80/con/ 403[+] Found http://192.168.126.142:80/css/ 403 步骤七解释结果最后，我们可以输入wmap_vulns -l命令来显示扫描结果。12345678910111213141516171819202122232425262728293031323334msf &gt; wmap_vulns -l[*] + [192.168.126.142] (192.168.126.142): scraper /[*] scraper Scraper[*] GET upload-labs[*] + [192.168.126.142] (192.168.126.142): directory /aux/[*] directory Directory found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /con/[*] directory Directory found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /nul/[*] directory Directory found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /prn/[*] directory Directory found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /.../[*] directory Directoy found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /css/[*] directory Directoy found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /doc/[*] directory Directoy found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /img/[*] directory Directoy found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /js/[*] directory Directoy found.[*] GET Res code: 403[*] + [192.168.126.142] (192.168.126.142): directory /upload/[*] directory Directoy found.[*] GET Res code: 403 我们可以看到它发现了一些可能值得进一步调查的可能有趣的目录：/ cgi-bin /目录允许执行脚本并直接在服务器上执行类似控制台的功能。/ phpMyAdmin /目录是MySQL数据库系统的开源管理工具。/ dav /目录允许用户远程协作和执行Web创作活动。WMAP可能不会像其他Web应用程序漏洞扫描程序那样返回详细结果，但这些信息可以成为探索不同攻击途径的有用起点。事实上，这个扫描仪可以从Metasploit框架中轻松加载和使用，这使它成为了解如何使用的有用工具。 总结Metasploit是一个功能强大的工具，不仅可以用于开发，还具有大量其他模块，可以直接在框架内加载和运行，使其成为渗透测试和道德黑客攻击的绝对强大。在本教程中，我们学习了如何快速启动和运行Metasploit的数据库系统，以及如何使用WMAP插件扫描Web应用程序中的漏洞。这只是Metasploit框架中许多非常有用的模块之一，每天都有更多的模块可以满足各地白帽的需求。]]></content>
      <categories>
        <category>WEB安全</category>
        <category>metasploit</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>工具</tag>
        <tag>渗透测试</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[metasploit的入门用法]]></title>
    <url>%2FWEB%E5%AE%89%E5%85%A8%2Fmetasploit%2Fmetasploit%E7%9A%84%E5%85%A5%E9%97%A8%E7%94%A8%E6%B3%95.html</url>
    <content type="text"><![CDATA[Metasploit简介Metasploit是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具。当H.D. Moore在2003年发布Metasploit时，计算机安全状况也被永久性地改变了。仿佛一夜之间，任何人都可以成为黑客，每个人都可以使用攻击工具来攻击那些未打过补丁或者刚刚打过补丁的漏洞。软件厂商再也不能推迟发布针对已公布漏洞的补丁了，这是因为Metasploit团队一直都在努力开发各种攻击工具，并将它们贡献给所有Metasploit用户。 Metasploit的设计初衷是打造成一个攻击工具开发平台，稍后将讲解如何开发攻击工具。然而在目前情况下，安全专家以及业余安全爱好者更多地将其当作一种点几下鼠标就可以利用其中附带的攻击工具进行成功攻击的环境。 Metasploit的工作方式开源软件Metasploit是H.D. Moore在2003年开发的，它是少数几个可用于执行诸多渗透测试步骤的工具。在发现新漏洞时(这是很常见的)，Metasploit会监控Rapid7，然后Metasploit的200,000多个用户会将漏洞添加到Metasploit的目录上。然后，任何人只要使用Metasploit，就可以用它来测试特定系统的是否有这个漏洞。 Metasploit框架使Metasploit具有良好的可扩展性，它的控制接口负责发现漏洞、攻击漏洞，提交漏洞，然后通过一些接口加入攻击后处理工具和报表工具。Metasploit框架可以从一个漏洞扫描程序导入数据，使用关于有漏洞主机的详细信息来发现可攻击漏洞，然后使用有效载荷对系统发起攻击。所有这些操作都可以通过Metasploit的Web界面进行管理，而它只是其中一种种管理接口，另外还有命令行工具和一些商业工具等等。 攻击者可以将来自漏洞扫描程序的结果导入到Metasploit框架的开源安全工具Armitage中，然后通过Metasploit的模块来确定漏洞。一旦发现了漏洞，攻击者就可以采取一种可行方法攻击系统，通过Shell或启动Metasploit的meterpreter来控制这个系统。 这些有效载荷就是在获得本地系统访问之后执行的一系列命令。这个过程需要参考一些文档并使用一些数据库技术，在发现漏洞之后开发一种可行的攻击方法。其中有效载荷数据库包含用于提取本地系统密码、安装其他软件或控制硬件等的模块，这些功能很像以前BO2K等工具所具备的功能。 特点这种可以扩展的模型将负载控制，编码器，无操作生成器和漏洞整合在一起，使 Metasploit Framework 成为一种研究高危漏洞的途径。它集成了各平台上常见的溢出漏洞和流行的 shellcode ，并且不断更新。最新版本的 MSF 包含了750多种流行的操作系统及应用软件的漏洞，以及224个 shellcode 。作为安全工具，它在安全检测中用着不容忽视的作用，并为漏洞自动化探测和及时检测系统漏洞提供了有力保障。 Metasploit自带上百种漏洞，还可以在online exploit building demo(在线漏洞生成演示)上看到如何生成漏洞。这使自己编写漏洞变得更简单，它势必将提升非法shellcode的水平，并且扩大网络阴暗面。与其相似的专业漏洞工具，如Core Impact和Canvas已经被许多专业领域用户使用。Metasploit降低了使用的门槛，将其推广给大众。 Metasploit的使用在运行 Metasploit 终端前，我们需要先启动MSF默认的数据库用于存储结果的数据库服务Metasploit利用PostgreSQL 数据库系统，在进行渗透测试时跟踪大量信息非常有用。这允许从其他工具导入和导出扫描结果，以及存储已发现的凭据，服务和其他有价值的数据。 root@kali:~# /etc/init.d/postgresql start 如果是第一次使用，我们可以在终端中使用msfdb init命令初始化数据库。这将为Metasploit创建一个默认数据库和用户进行交互。 msfdb init初始化msfdb start开启数据库你可以进入postgresql数据库中新建一个数据库并绑定metasploit 启动命令行终端，运行metaspoit控制台root@kali:~# msfconsole 最后，我们可以使用db_status命令检查数据库是否已加载并正常工作12msf &gt; db_status[*] postgresql connected to msf]]></content>
      <categories>
        <category>WEB安全</category>
        <category>metasploit</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>工具</tag>
        <tag>渗透测试</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[metasploit基础命令总结]]></title>
    <url>%2FWEB%E5%AE%89%E5%85%A8%2Fmetasploit%2Fmetasploit%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[基础命令介绍msfconsole：启动MSF终端banner ：显示一个非常棒的 bannercd： 改变当前的工作目录color： 切换颜色connect（远程连接）： 与主机通信edit （编辑）： 编辑与$ VISUAL或$ EDITOR当前模块的exit （退出命令行）： 退出控制台get （获取变量）： 获取特定上下文变量的值getg （全局获取变量）： 获取一个全局变量的值go_pro ： 启动Metasploit的网页图形用户界面 grep： grep的另一个命令的输出help（帮助） ： 帮助菜单info（获取模块信息）： 关于一个或多个模块显示信息irb： 进入irb脚本模式jobs：显示和管理职位kill（结束进程）： 结束一个进程load （加载）： 加载一个框架插件loadpath ： 搜索和负载从一个路径模块makerc： 保存自开始进入到一个文件中的命令popm： 弹出最新的模块从堆栈中并使其活跃 previous ： 将以前加载模块作为当前模块pushm ： 推主动或模块列表在模块栈quit （退出控制台）： 退出控制台reload_all Reloads ： 从所有定义的模块路径的所有模块rename_job ： 重命名工作resource ： 运行存储命令在文件route ： 通过会话路由流量save： 将数据存储主动search（搜索exp等模块关键字）： 搜索模块的名称和说明sessions（会话功能）： 转储会话列表和显示有关会话的信息 set （设置参数）： 设置一个特定的上下文变量的值setg（全局设置参数）： 设置一个全局变量的值show （展示参数模块）： 给定类型的显示模块或所有模块sleep ： 什么都不做对的指定秒数spool ： 写控制台输出到一个文件以及屏幕threads ： 查看和操作后台线程unload （卸载某个插件）： 卸载一个框架插件unset （删除某个设置参数）： 取消设置一个或多个特定的上下文变量unsetg （取消全局某个设置参数）： 取消设置一个或多个全局变量的use （使用某个模块）： 选择按名称模块version（查看版本信息）： 显示的框架和控制台库版本号 命令作用详情use：当你已经决定在一个特定的模块使用,使用的命令以选中它。使用的命令改变你的环境到一个特定的模块,将特定类型的命令。back：切换上下模块，返回上一步骤。一旦你已经完成了工作与一个特定的模块,或者如果你无意中选择了错误的模块,你可以“恢复”命令将当前上下文。search：msfconsole包括一个广泛的基于正则表达式的搜索功能。如果你有一个总体的想法你正在寻找你可以通过“搜索”搜索。在下面的输出中,搜索是ms08-067。搜索功能将在模块定位这个字符串名称、描述、参考文献等。]]></content>
      <categories>
        <category>WEB安全</category>
        <category>metasploit</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>工具</tag>
        <tag>渗透测试</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入http请求流程]]></title>
    <url>%2Funcategorized%2F%E6%B7%B1%E5%85%A5HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.html</url>
    <content type="text"><![CDATA[HTTP介绍 HTTP协议（HyperText Transfer Protocol)，即超文本传输协议，是一种详细规定了浏览器和万维网服务器之间互相通信的规则，他是万维网交换信息的基础，它允许HTML（超文本标记语言）文档从WEB服务器传送到WEB浏览器。是用于从WWW服务器传输超文本到本地浏览器的传送协议。它的发展是万维网协会（World Wide Web Consortium）和Internet工作小组IETF（Internet Engineering Task Force）合作的结果。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。 版本最常用的是HTTP1.0/1.1最新版本是HTTP2.0，与1.0/1.1相比，有了更高的性能、安全性和灵活性以前的版本0.9等 HTTP协议在这里首先介绍一下URLURL(统一资源定位符)也被称为网页地址，是互联网标准的地址。标准格式如下：协议://服务器ip [:端口]/路径/[?查询];https://franci4.github.io/uncategorized/Welcome-to-My-Blog.html 就是一个标准的URL. HTTP协议目前最新的版本是2.0，是一种无状态的协议。无状态是指web浏览器与web服务器之间不需要建议持久的连接，这意味着当一个客户向服务器端发起请求，然后web服务器返回响应（Response），连接就关闭了，在服务端不保留连接的有关信息。也就是说，HTTP请求只能由客户端发起，而服务器不能主动向客户端发送数据。 HTTP遵循请求（Request）应答（Response）模型，web浏览器向服务器发送请求时，web服务器处理请求并返回适当的应答。 HTTP请求与响应（1）HTTP请求HTTP请求包括三部分，分别是请求行（请求方法），请求头（消息报头）和请求正文。下面是HTTP请求的一个例子。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Nmap之侦测版本和系统]]></title>
    <url>%2FWEB%E5%AE%89%E5%85%A8%2FNmap%2FNmap%E4%B9%8B%E4%BE%A6%E6%B5%8B%E7%89%88%E6%9C%AC%E5%92%8C%E7%B3%BB%E7%BB%9F.html</url>
    <content type="text"><![CDATA[实验目的1、通过对设备或者防火墙的探测来审计它的安全性。2、探测目标主机所开放的端口。3、网络存储，网络映射，维护和资产管理。4、通过识别新的服务器审计网络的安全性。5、探测网络上的主机。 实验原理nmap使用tcp/ip协议栈指纹来识别不同的操作系统和设备。在RFC规范中，有些地方对TCP/IP的实现并没有强制规定，由于不同的TCP/IP方案中可能都有自己的特定方案。namp主要是根据这些细节上的差异来判断操作系统的类型。 实验内容主机探测：探测网络上的主机，例如列出响应TCP和ICMP请求、icmp请求、开放特别端口的主机。端口扫描：探测目标主机所开放的端口。版本检测：探测目标主机的网络服务，判断其服务名称及版本号。系统检测：探测目标主机的操作系统及网络设备的硬件特性。支持探测脚本的编写：使用Nmap的脚本引擎（NSE）和Lua编程语言。 实验环境描述1、靶机 带有环境 用户名密码为： admin 1234562、攻击机 带有nmap工具 用户名密码为 root toor 实验步骤1、进入win7虚拟机，开启桌面上xampp工具，开启Apache、和MySQL服务，然后输入ipconfig和ifconfig查看靶机和攻击机的ip地址。]]></content>
      <categories>
        <category>WEB安全</category>
        <category>Nmap</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>Nmap</tag>
        <tag>工具</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.使用sqlmap获取目标敏感信息实战详解]]></title>
    <url>%2FWEB%E5%AE%89%E5%85%A8%2Fsqlmap%2F1-%E4%BD%BF%E7%94%A8sqlmap%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E5%AE%9E%E6%88%98%E8%AF%A6%E8%A7%A3.html</url>
    <content type="text"><![CDATA[实验目的1.熟悉sqlmap的基本命令2.使用sqlmap获取目标敏感信息实战 实验原理使用sqlmap获取目标敏感信息实战详解 实验内容使用sqlmap获取目标敏感信息实战详解 实验环境描述靶机系统为windows7 dvwa渗透机系统为kali linux 实验步骤1.首先进入靶机，打开命令提示符，输入命令ipcinfig来查看ip地址。2.进入kali渗透机，打开浏览器访问虚拟机win7的ip地址，浏览正常网页，登录dvwa。3.点击DVWA Security 选择low，点击按钮。4.点击左边的选择框，选择SQL injection。5.点击右上角的设置，open menu-Preferences-Advanced-Network-Settings，选择Manual proxy configuration HTTP Poxy：127.0.0.1；Port：8080.点击ok设置代理完成。6.在kali打开终端输入：burpsuite。7.在poxy选项卡中的intercept选项卡中，将设置为off，不拦截数据包。8.回到dvwa中，在浏览器窗口的SQLinjection界面中的User ID 中输入：1.2，然后把burpsuite打开。点击按钮9.在burpsuite的poxy中的intercept选项卡中出现了一些信息。然后复制cookie中的内容。10.在终端中打开sqlmap进行测试 输入：sqlmap -u ‘url’ –cookie ‘cookie内容’回车，在后面可以加入参数：-b 获取数据库的标题。11.参数–current-user检索DBMS当前用户 获取数据库当前用户。12.–current-db 检索DBMS当前数据库。 获取当前数据库名称。13.–hostname检索DBMS服务器主机名，获取主机名。14.–is-dba检测DBMS当前用户是不是DBA权限。检测当前用户的权限是不是DBA（最高权限）15.–users枚举DBMS用户。 获取数据库的所有用户。16.–passwords枚举DBMS用户密码hashes值。获取数据库用户的密码的hashes值。首先（1）问你是否进行下一步处理，选Y（2）您想对检测到的密码哈希执行基于字典的攻击吗？（Y/N/Q） 选y（3）最后会给你几种选项，使用默认的字典文件-自定义字典文件-带有字典文件列表的文件。选1即可。（4）您想使用常用的密码后缀吗？（慢）（Y/N） 最后他会开始爆破。得出ATABASE管理系统用户密码散列；密码散列和root17.–privilege枚举BDMS用户权限，可以看到root用户的权限最高，可执行的操作最多18.–roles枚举DBMS用户角色。19.–dbs枚举DBMS数据库。获取当前可用的数据库。20.–tables枚举DBMS数据库表，获取不同数据库下的表。21.–columns枚举DBMS数据库表的列。获取不同数据表下的列。22.–schema枚举数据库模式。23.–count检索表的项数目。24.–dump转出数据库表的映射表项目。就得到了登录名和密码，我们试一下logout在用不同的密码登录，但是如果登录，cookie信息就要重新获取。然后再登录。25.–search搜索用，比如：–serach -D dvwa就可以找到这个数据库。26.–comments检索DBMS注释，说明。获取数据库注释信息。27.-D 指定数据库进行枚举。格式为 -D 制定数据库 –tables。获取制定数据库表信息。28.-T 指定表进行枚举，指定数据库 ，制定表获得列信息。格式：-D 制定数据库 -T 制定表 -column29.-C 制定列获取信息 指定数据库-指定表-指定列名获得数据。格式：-D 指定数据库 -T 指定表 -C 指定列 -dump30.-X 枚举DBMS数据库列的时候排除某个列 格式-D 制定数据库 -T 指定表 -X 排除的列 –dump31.–sql-query=QUERY执行sql语句，格式：–sql-query=“SQL语句”执行一条语句。32.–sql-shell提供一个交互式界面，可能会使界面更加简洁一些。33.最后登录成功。]]></content>
      <categories>
        <category>WEB安全</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome to My Blog]]></title>
    <url>%2Funcategorized%2FWelcome-to-My-Blog.html</url>
    <content type="text"><![CDATA[大家好，我是Franci4，一名尚在求学阶段的WEB狗，目前潜心学习渗透测试知识，和队友打打CTF；而这里是我的个人博客，用于记录我学习路上的点点滴滴。 希望我的学习收获能帮助到你~]]></content>
  </entry>
</search>
